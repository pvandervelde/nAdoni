<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandLine_Options_DownloadUrl_Description" xml:space="preserve">
    <value>The URL that points to the downloadable package.</value>
  </data>
  <data name="CommandLine_Options_DownloadUrl_Key" xml:space="preserve">
    <value>u=|DownloadUrl=</value>
  </data>
  <data name="CommandLine_Options_FilePath_Description" xml:space="preserve">
    <value>The full path to the package file from which the manifest hash values will be computed.</value>
  </data>
  <data name="CommandLine_Options_FilePath_Key" xml:space="preserve">
    <value>f=|FilePath=</value>
  </data>
  <data name="CommandLine_Options_Help_Description" xml:space="preserve">
    <value>Prints out the command line options.</value>
  </data>
  <data name="CommandLine_Options_Help_Key" xml:space="preserve">
    <value>?|h|help</value>
  </data>
  <data name="CommandLine_Options_KeyContainer_Description" xml:space="preserve">
    <value>The name of the key container that contains the key that should be used to sign the manifest.</value>
  </data>
  <data name="CommandLine_Options_KeyContainer_Key" xml:space="preserve">
    <value>c:|KeyContainerName:</value>
  </data>
  <data name="CommandLine_Options_KeyFile_Description" xml:space="preserve">
    <value>The full path to the file that contains the key that should be used to sign the manifest.</value>
  </data>
  <data name="CommandLine_Options_KeyFile_Key" xml:space="preserve">
    <value>k:|KeyFile:</value>
  </data>
  <data name="CommandLine_Options_OutputPath_Description" xml:space="preserve">
    <value>The full path to the location where the generated manifest file should be placed.</value>
  </data>
  <data name="CommandLine_Options_OutputPath_Key" xml:space="preserve">
    <value>o=|Output=</value>
  </data>
  <data name="CommandLine_Options_ProductName_Description" xml:space="preserve">
    <value>The name of the product.</value>
  </data>
  <data name="CommandLine_Options_ProductName_Key" xml:space="preserve">
    <value>n=|ProductName=</value>
  </data>
  <data name="CommandLine_Options_Version_Description" xml:space="preserve">
    <value>The version of the product.</value>
  </data>
  <data name="CommandLine_Options_Version_Key" xml:space="preserve">
    <value>v=|ProductVersion=</value>
  </data>
  <data name="Header_ApplicationAndVersion" xml:space="preserve">
    <value>Nuclei AutoUpdate manifest builder ({0})</value>
  </data>
  <data name="Header_OtherPackages_IdAndLicense" xml:space="preserve">
    <value>        {0} (version: {1}). For more information see: {2}</value>
  </data>
  <data name="Header_OtherPackages_Intro" xml:space="preserve">
    <value>This application makes use of the following open source software:</value>
  </data>
  <data name="Help_Usage_Intro" xml:space="preserve">
    <value>Usage: apollo.UI.console.exe [OPTIONS]</value>
  </data>
  <data name="Log_Error_InvalidInputParameters_WithException" xml:space="preserve">
    <value>Unable to parse the input parameters. Exception was: {0}</value>
  </data>
  <data name="Log_Information_ApplicationAndVersion" xml:space="preserve">
    <value>Nuclei.AutoUpdate.ManifestBuilder - Version: {0}</value>
  </data>
  <data name="Log_Information_InputParameterApplicationName" xml:space="preserve">
    <value>Application name: {0}</value>
  </data>
  <data name="Log_Information_InputParameterApplicationVersion" xml:space="preserve">
    <value>Application version: {0}</value>
  </data>
  <data name="Log_Information_InputParameterDownloadUri" xml:space="preserve">
    <value>Download URL: {0}</value>
  </data>
  <data name="Log_Information_InputParameterFilePath" xml:space="preserve">
    <value>Input package file: {0}</value>
  </data>
  <data name="Log_Information_InputParameterKeyContainer" xml:space="preserve">
    <value>Key container name: {0}</value>
  </data>
  <data name="Log_Information_InputParameterKeyFile" xml:space="preserve">
    <value>Key file path: {0}</value>
  </data>
  <data name="Log_Information_InputParameterOutputPath" xml:space="preserve">
    <value>Manifest output file: {0}</value>
  </data>
  <data name="Log_Information_SigningManifest" xml:space="preserve">
    <value>Signing manifest</value>
  </data>
  <data name="Log_Information_WritingManifest" xml:space="preserve">
    <value>Creating manifest</value>
  </data>
  <data name="Output_Error_InvalidInput" xml:space="preserve">
    <value>The provided input parameters were not valid.</value>
  </data>
  <data name="Output_Error_MissingValues" xml:space="preserve">
    <value>Missing one or more configuration values. Please see the help for more information.</value>
  </data>
  <data name="Output_Information_SigningManifest" xml:space="preserve">
    <value>Signing manifest ...</value>
  </data>
  <data name="Output_Information_WritingManifest" xml:space="preserve">
    <value>Creating manifest ...</value>
  </data>
</root>