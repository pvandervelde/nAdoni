<!-- 
     Copyright 2013 Nuclei. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' 
         ToolsVersion="4.0">
    <UsingTask TaskName="NugetRestore" 
               TaskFactory="CodeTaskFactory" 
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <NugetPath ParameterType="System.String" Required="true" />
            <PackageFile ParameterType="System.String" Required="true" />
            <PackageDirectory ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Reference Include="System.Xml.Linq" />
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        if (!System.IO.File.Exists(PackageFile))
                        {
                            Log.LogMessage("File does not exist: {0}", PackageFile);
                        }

                        System.Xml.Linq.XDocument xDoc = null;
                        try
                        {
                            xDoc = System.Xml.Linq.XDocument.Load(PackageFile);
                        }
                        catch (System.Exception)
                        {
                            Log.LogError("Failed to load document {0}.", PackageFile);
                        }

                        var packages = from package in xDoc.Element("packages").Descendants("package")
                                       select new
                                       {
                                           Id = package.Attribute("id").Value,
                                           Version = package.Attribute("version").Value,
                                       };

                        foreach (var package in packages)
                        {
                            var builder = new System.Text.StringBuilder();
                            {
                                builder.Append(string.Format("install \"{0}\" ", package.Id));
                                builder.Append(string.Format("-Version {0} ", package.Version));
                                builder.Append("-NonInteractive -Verbosity detailed -NoCache ");
                                builder.Append(string.Format("-OutputDirectory \"{0}\" ", PackageDirectory));
                            }

                            var info = new System.Diagnostics.ProcessStartInfo
                            {
                                FileName = NugetPath,
                                Arguments = builder.ToString(),
                                UseShellExecute = false,
                                RedirectStandardOutput = true,
                                RedirectStandardError = true,
                            };
                            var process = new System.Diagnostics.Process();
                            process.StartInfo = info;
                            process.OutputDataReceived +=
                                (s, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogMessage(MessageImportance.Normal, e.Data);
                                    }
                                };
                            process.ErrorDataReceived +=
                                (s, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogError(e.Data);
                                    }
                                };
                            process.Start();

                            process.BeginOutputReadLine();
                            process.BeginErrorReadLine();
                            process.WaitForExit();
                        }
                        
                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged 
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>  
            </Code>
        </Task>
    </UsingTask>
</Project>