<!-- 
     Copyright 2013 Nuclei. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' 
         ToolsVersion="4.0">
    <UsingTask TaskName="ReportGenerator" 
               TaskFactory="CodeTaskFactory" 
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <ReportGeneratorExe ParameterType="System.String" Required="true" />
            <ReportGeneratorDir ParameterType="System.String" Required="true" />
            <OpenCoverOutputFile ParameterType="System.String" Required="true" />
            <OutputDir ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        var builder = new System.Text.StringBuilder();
                        {
                            builder.Append(string.Format("-reports:\"{0}\" ", OpenCoverOutputFile));
                            builder.Append(string.Format("-targetdir:\"{0}\" ", OutputDir));
                            builder.Append(string.Format("-reporttypes:Html;XmlSummary"));
                        }

                        var info = new System.Diagnostics.ProcessStartInfo
                        {
                            FileName = System.IO.Path.Combine(ReportGeneratorDir, ReportGeneratorExe),
                            Arguments = builder.ToString(),
                            UseShellExecute = false,
                            RedirectStandardOutput = true,
                            RedirectStandardError = true,
                        };
                        
                        Log.LogMessage(MessageImportance.Normal, info.Arguments);
                        
                        var process = new System.Diagnostics.Process();
                        process.StartInfo = info;
                        process.OutputDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogMessage(MessageImportance.Normal, e.Data);
                                }
                            };
                        process.ErrorDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogError(e.Data);
                                }
                            };
                        process.Start();

                        process.BeginOutputReadLine();
                        process.BeginErrorReadLine();
                        process.WaitForExit();
                        
                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged 
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors && (process.ExitCode == 0);
                    }
                ]]>  
            </Code>
        </Task>
    </UsingTask>
</Project>